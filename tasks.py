from robocorp import vault, log
from robocorp.tasks import task
from RPA.Browser.Selenium import Selenium, ChromeOptions, BrowserNotFoundError
import json
from typing import Callable
from dotenv import load_dotenv
import os
from RPA.Email.Exchange import Exchange

load_dotenv(".env")
MAIL_SECRET = vault.get_secret(os.getenv("SECRET_NAME"))
USERNAME = os.getenv("USERNAME")
RECIPIENTS = os.getenv("RECIPIENTS")


exchange_mail = Exchange(
    vault_name=MAIL_SECRET.name,
    vault_token_key="token",
    tenant=MAIL_SECRET["tenant"],
)


@task
def authenticate_microsoft_exchange():
    try:
        microsoft_oauth_flow(exchange_mail)
    except AssertionError as e:
        print(f"{e}")
    except BrowserNotFoundError as e:
        print(f"FAILED: {e}")
    else:
        print("Authentication flow completed, token saved to vault")


@task
def run_mail_test():
    try:
        send_test_mail(exchange_mail)
    except json.JSONDecodeError:
        print("FAILED: Check integrity of token value")
    else:
        print("Verification mail has been sent!")


@log.suppress
def microsoft_oauth_flow(exchange_mail: Exchange) -> None:
    """Runs Microsoft Oauth flow, saves generated token
    to vault
    Args:
        exchange_mail (Exchange): Exchange instance
    """
    token = init_oauth_flow(
        exchange_mail.generate_oauth_url,
        exchange_mail.get_oauth_token,
    )
    MAIL_SECRET["token"] = token
    vault.set_secret(MAIL_SECRET)


@log.suppress
def init_oauth_flow(
    generate_oauth_url: Callable,
    get_oauth_token: Callable,
) -> str:
    """Start the OAuth2 flow by generating a permission URL, which the
    user has to surf in order to authenticate itself and authorize the app to
    send e-mails on its behalf.

    Args:
        generate_oauth_url (Callable): function for oauth app url generation
        get_oauth_token (Callable): function to generate token for oauth

    Returns:
        str: token generated by the flow
    """
    url = generate_oauth_url(MAIL_SECRET["client_id"])
    response_url = get_auth_url_from_browser(url)
    token = get_oauth_token(MAIL_SECRET["client_secret"], response_url)
    # returning token as string for vault compability
    return json.dumps(token)


@log.suppress
def get_auth_url_from_browser(url: str) -> str:
    """Uses browser to get authentication url

    Args:
        url (str): target app user verifivation url

    Returns:
        str: verified response url
    """
    browser = Selenium()
    options = ChromeOptions()
    options.add_argument("-disable-search-engine-choice-screen")
    browser.open_available_browser(
        url,
        browser_selection="chrome",
        download=False,
        options=options,
    )
    browser.wait_until_location_contains(
        "code=",
        timeout=300,
        message="Please authenticate and accept the consent faster",
    )
    response_url = browser.get_location()
    browser.close_all_browsers()
    return response_url


def send_test_mail(exchange_mail: Exchange) -> None:
    """Sends test mail using OAuth token from vault

    Args:
        exchange_mail (Exchange): Exchange instance
    """
    with log.suppress_variables():
        # need to change token to JSON to be able to refresh
        token_as_json = json.loads(MAIL_SECRET["token"])
        exchange_mail.authorize(
            username=USERNAME,
            autodiscover=False,
            server="outlook.office365.com",
            is_oauth=True,
            client_id=MAIL_SECRET["client_id"],
            client_secret=MAIL_SECRET["client_secret"],
            token=token_as_json,
        )
        exchange_mail.send_message(
            recipients=RECIPIENTS,
            subject="OAuth2 Exchange message from RPA robot",
            body="Congrats! You're using Modern Authentication.",
            save=True,
        )
